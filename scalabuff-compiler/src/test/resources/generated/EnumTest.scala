// Generated by ScalaBuff, the Scala Protocol Buffers compiler. DO NOT EDIT!
// source: enum.proto

package resources.generated

object ComputerPeripherals extends net.sandrogrzicic.scalabuff.Enum {
	sealed trait EnumVal extends Value
	val _UNINITIALIZED = new EnumVal { val name = "UNINITIALIZED ENUM VALUE"; val id = -1 }

	val KEYBOARD = new EnumVal { val name = "KEYBOARD"; val id = 1 }
	val MOUSE = new EnumVal { val name = "MOUSE"; val id = 2 }

	val KEYBOARD_VALUE = 1
	val MOUSE_VALUE = 2

	def valueOf(id: Int) = id match {
		case 1 => KEYBOARD
		case 2 => MOUSE
		case _default => throw new net.sandrogrzicic.scalabuff.UnknownEnumException(_default)
	}
	val internalGetValueMap = new com.google.protobuf2.Internal.EnumLiteMap[EnumVal] {
		def findValueByNumber(id: Int): EnumVal = valueOf(id)
	}
}
final case class MyPeripherals (
	`primaryPeripheral`: Option[ComputerPeripherals.EnumVal] = Some(ComputerPeripherals.KEYBOARD),
	`secondaryPeripheral`: Option[ComputerPeripherals.EnumVal] = None
) extends com.google.protobuf2.GeneratedMessageLite
	with com.google.protobuf2.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[MyPeripherals]
	with net.sandrogrzicic.scalabuff.Parser[MyPeripherals] {

	

def escape(raw: Any): String = {
  import scala.reflect.runtime.universe._
  Literal(Constant(raw)).toString
}

          	def setPrimaryPeripheral(_f: ComputerPeripherals.EnumVal) = copy(`primaryPeripheral` = Some(_f))
	def setSecondaryPeripheral(_f: ComputerPeripherals.EnumVal) = copy(`secondaryPeripheral` = Some(_f))

	def clearPrimaryPeripheral = copy(`primaryPeripheral` = None)
	def clearSecondaryPeripheral = copy(`secondaryPeripheral` = None)

	def writeTo(output: com.google.protobuf2.CodedOutputStream) {
		if (`primaryPeripheral`.isDefined) output.writeEnum(1, `primaryPeripheral`.get)
		if (`secondaryPeripheral`.isDefined) output.writeEnum(2, `secondaryPeripheral`.get)
	}

	def getSerializedSize = {
		import com.google.protobuf2.CodedOutputStream._
		var __size = 0
		if (`primaryPeripheral`.isDefined) __size += computeEnumSize(1, `primaryPeripheral`.get)
		if (`secondaryPeripheral`.isDefined) __size += computeEnumSize(2, `secondaryPeripheral`.get)

		__size
	}

	def mergeFrom(in: com.google.protobuf2.CodedInputStream, extensionRegistry: com.google.protobuf2.ExtensionRegistryLite): MyPeripherals = {
		import com.google.protobuf2.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __primaryPeripheral: Option[ComputerPeripherals.EnumVal] = `primaryPeripheral`
		var __secondaryPeripheral: Option[ComputerPeripherals.EnumVal] = `secondaryPeripheral`

		def __newMerged = MyPeripherals(
			__primaryPeripheral,
			__secondaryPeripheral
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 8 => __primaryPeripheral = Some(try { ComputerPeripherals.valueOf(in.readEnum()) } catch { case e: Exception => Some(ComputerPeripherals.KEYBOARD).get })
			case 16 => __secondaryPeripheral = Some(ComputerPeripherals.valueOf(in.readEnum()))
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: MyPeripherals) = {
		MyPeripherals(
			m.`primaryPeripheral`.orElse(`primaryPeripheral`),
			m.`secondaryPeripheral`.orElse(`secondaryPeripheral`)
		)
	}

	def getDefaultInstanceForType = MyPeripherals.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf2.CodedInputStream, er: com.google.protobuf2.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			if (`primaryPeripheral`.isDefined) { sb.append(indent1).append("\"primaryPeripheral\": ").append("\"").append(`primaryPeripheral`.get).append("\"").append(',') }
			if (`secondaryPeripheral`.isDefined) { sb.append(indent1).append("\"secondaryPeripheral\": ").append("\"").append(`secondaryPeripheral`.get).append("\"").append(',') }
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object MyPeripherals {
	@scala.beans.BeanProperty val defaultInstance = new MyPeripherals()

	def parseFrom(data: Array[Byte]): MyPeripherals = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): MyPeripherals = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf2.ByteString): MyPeripherals = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): MyPeripherals = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[MyPeripherals] = defaultInstance.mergeDelimitedFromStream(stream)

	val PRIMARY_PERIPHERAL_FIELD_NUMBER = 1
	val SECONDARY_PERIPHERAL_FIELD_NUMBER = 2

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: MyPeripherals) = defaultInstance.mergeFrom(prototype)

}
final case class Outer (
	`innerRequired`: Outer.Inner.EnumVal = Outer.Inner._UNINITIALIZED,
	`innerOptional`: Option[Outer.Inner.EnumVal] = Some(Outer.Inner.FIRST),
	`innerRepeated`: scala.collection.immutable.Seq[Outer.Inner.EnumVal] = Vector.empty[Outer.Inner.EnumVal]
) extends com.google.protobuf2.GeneratedMessageLite
	with com.google.protobuf2.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[Outer]
	with net.sandrogrzicic.scalabuff.Parser[Outer] {

	

def escape(raw: Any): String = {
  import scala.reflect.runtime.universe._
  Literal(Constant(raw)).toString
}

          	def setInnerOptional(_f: Outer.Inner.EnumVal) = copy(`innerOptional` = Some(_f))
	def setInnerRepeated(_i: Int, _v: Outer.Inner.EnumVal) = copy(`innerRepeated` = `innerRepeated`.updated(_i, _v))
	def addInnerRepeated(_f: Outer.Inner.EnumVal) = copy(`innerRepeated` = `innerRepeated` :+ _f)
	def addAllInnerRepeated(_f: Outer.Inner.EnumVal*) = copy(`innerRepeated` = `innerRepeated` ++ _f)
	def addAllInnerRepeated(_f: TraversableOnce[Outer.Inner.EnumVal]) = copy(`innerRepeated` = `innerRepeated` ++ _f)

	def clearInnerOptional = copy(`innerOptional` = None)
	def clearInnerRepeated = copy(`innerRepeated` = Vector.empty[Outer.Inner.EnumVal])

	def writeTo(output: com.google.protobuf2.CodedOutputStream) {
		output.writeEnum(1, `innerRequired`)
		if (`innerOptional`.isDefined) output.writeEnum(2, `innerOptional`.get)
		for (_v <- `innerRepeated`) output.writeEnum(3, _v)
	}

	def getSerializedSize = {
		import com.google.protobuf2.CodedOutputStream._
		var __size = 0
		__size += computeEnumSize(1, `innerRequired`)
		if (`innerOptional`.isDefined) __size += computeEnumSize(2, `innerOptional`.get)
		for (_v <- `innerRepeated`) __size += computeEnumSize(3, _v)

		__size
	}

	def mergeFrom(in: com.google.protobuf2.CodedInputStream, extensionRegistry: com.google.protobuf2.ExtensionRegistryLite): Outer = {
		import com.google.protobuf2.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __innerRequired: Outer.Inner.EnumVal = Outer.Inner._UNINITIALIZED
		var __innerOptional: Option[Outer.Inner.EnumVal] = `innerOptional`
		val __innerRepeated: scala.collection.mutable.Buffer[Outer.Inner.EnumVal] = `innerRepeated`.toBuffer

		def __newMerged = Outer(
			__innerRequired,
			__innerOptional,
			Vector(__innerRepeated: _*)
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 8 => __innerRequired = Outer.Inner.valueOf(in.readEnum())
			case 16 => __innerOptional = Some(try { Outer.Inner.valueOf(in.readEnum()) } catch { case e: Exception => Some(Outer.Inner.FIRST).get })
			case 24 => __innerRepeated += Outer.Inner.valueOf(in.readEnum())
			case 26 => 
				val length = in.readRawVarint32()
				val limit = in.pushLimit(length)
				while (in.getBytesUntilLimit() > 0) {
					__innerRepeated += Outer.Inner.valueOf(in.readEnum())
				}
				in.popLimit(limit)
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: Outer) = {
		Outer(
			m.`innerRequired`,
			m.`innerOptional`.orElse(`innerOptional`),
			`innerRepeated` ++ m.`innerRepeated`
		)
	}

	def getDefaultInstanceForType = Outer.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf2.CodedInputStream, er: com.google.protobuf2.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"innerRequired\": ").append("\"").append(`innerRequired`).append("\"").append(',')
			if (`innerOptional`.isDefined) { sb.append(indent1).append("\"innerOptional\": ").append("\"").append(`innerOptional`.get).append("\"").append(',') }
			sb.append(indent1).append("\"innerRepeated\": [").append(indent2).append(`innerRepeated`.map("\"" + _ + "\"").mkString(", " + indent2)).append(indent1).append(']').append(',')
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object Outer {
	@scala.beans.BeanProperty val defaultInstance = new Outer()

	def parseFrom(data: Array[Byte]): Outer = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): Outer = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf2.ByteString): Outer = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): Outer = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[Outer] = defaultInstance.mergeDelimitedFromStream(stream)

	val INNER_REQUIRED_FIELD_NUMBER = 1
	val INNER_OPTIONAL_FIELD_NUMBER = 2
	val INNER_REPEATED_FIELD_NUMBER = 3

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: Outer) = defaultInstance.mergeFrom(prototype)

	object Inner extends net.sandrogrzicic.scalabuff.Enum {
		sealed trait EnumVal extends Value
		val _UNINITIALIZED = new EnumVal { val name = "UNINITIALIZED ENUM VALUE"; val id = -1 }

		val FIRST = new EnumVal { val name = "FIRST"; val id = 1 }
		val SECOND = new EnumVal { val name = "SECOND"; val id = 2 }

		val FIRST_VALUE = 1
		val SECOND_VALUE = 2

		def valueOf(id: Int) = id match {
			case 1 => FIRST
			case 2 => SECOND
			case _default => throw new net.sandrogrzicic.scalabuff.UnknownEnumException(_default)
		}
		val internalGetValueMap = new com.google.protobuf2.Internal.EnumLiteMap[EnumVal] {
			def findValueByNumber(id: Int): EnumVal = valueOf(id)
		}
	}

}
final case class OuterDuplicate (
	`innerRequired`: OuterDuplicate.Inner.EnumVal = OuterDuplicate.Inner._UNINITIALIZED,
	`innerOptional`: Option[OuterDuplicate.Inner.EnumVal] = Some(OuterDuplicate.Inner.SECOND),
	`innerRepeated`: scala.collection.immutable.Seq[OuterDuplicate.Inner.EnumVal] = Vector.empty[OuterDuplicate.Inner.EnumVal]
) extends com.google.protobuf2.GeneratedMessageLite
	with com.google.protobuf2.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[OuterDuplicate]
	with net.sandrogrzicic.scalabuff.Parser[OuterDuplicate] {

	

def escape(raw: Any): String = {
  import scala.reflect.runtime.universe._
  Literal(Constant(raw)).toString
}

          	def setInnerOptional(_f: OuterDuplicate.Inner.EnumVal) = copy(`innerOptional` = Some(_f))
	def setInnerRepeated(_i: Int, _v: OuterDuplicate.Inner.EnumVal) = copy(`innerRepeated` = `innerRepeated`.updated(_i, _v))
	def addInnerRepeated(_f: OuterDuplicate.Inner.EnumVal) = copy(`innerRepeated` = `innerRepeated` :+ _f)
	def addAllInnerRepeated(_f: OuterDuplicate.Inner.EnumVal*) = copy(`innerRepeated` = `innerRepeated` ++ _f)
	def addAllInnerRepeated(_f: TraversableOnce[OuterDuplicate.Inner.EnumVal]) = copy(`innerRepeated` = `innerRepeated` ++ _f)

	def clearInnerOptional = copy(`innerOptional` = None)
	def clearInnerRepeated = copy(`innerRepeated` = Vector.empty[OuterDuplicate.Inner.EnumVal])

	def writeTo(output: com.google.protobuf2.CodedOutputStream) {
		output.writeEnum(1, `innerRequired`)
		if (`innerOptional`.isDefined) output.writeEnum(2, `innerOptional`.get)
		for (_v <- `innerRepeated`) output.writeEnum(3, _v)
	}

	def getSerializedSize = {
		import com.google.protobuf2.CodedOutputStream._
		var __size = 0
		__size += computeEnumSize(1, `innerRequired`)
		if (`innerOptional`.isDefined) __size += computeEnumSize(2, `innerOptional`.get)
		for (_v <- `innerRepeated`) __size += computeEnumSize(3, _v)

		__size
	}

	def mergeFrom(in: com.google.protobuf2.CodedInputStream, extensionRegistry: com.google.protobuf2.ExtensionRegistryLite): OuterDuplicate = {
		import com.google.protobuf2.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __innerRequired: OuterDuplicate.Inner.EnumVal = OuterDuplicate.Inner._UNINITIALIZED
		var __innerOptional: Option[OuterDuplicate.Inner.EnumVal] = `innerOptional`
		val __innerRepeated: scala.collection.mutable.Buffer[OuterDuplicate.Inner.EnumVal] = `innerRepeated`.toBuffer

		def __newMerged = OuterDuplicate(
			__innerRequired,
			__innerOptional,
			Vector(__innerRepeated: _*)
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 8 => __innerRequired = OuterDuplicate.Inner.valueOf(in.readEnum())
			case 16 => __innerOptional = Some(try { OuterDuplicate.Inner.valueOf(in.readEnum()) } catch { case e: Exception => Some(OuterDuplicate.Inner.SECOND).get })
			case 24 => __innerRepeated += OuterDuplicate.Inner.valueOf(in.readEnum())
			case 26 => 
				val length = in.readRawVarint32()
				val limit = in.pushLimit(length)
				while (in.getBytesUntilLimit() > 0) {
					__innerRepeated += OuterDuplicate.Inner.valueOf(in.readEnum())
				}
				in.popLimit(limit)
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: OuterDuplicate) = {
		OuterDuplicate(
			m.`innerRequired`,
			m.`innerOptional`.orElse(`innerOptional`),
			`innerRepeated` ++ m.`innerRepeated`
		)
	}

	def getDefaultInstanceForType = OuterDuplicate.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf2.CodedInputStream, er: com.google.protobuf2.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"innerRequired\": ").append("\"").append(`innerRequired`).append("\"").append(',')
			if (`innerOptional`.isDefined) { sb.append(indent1).append("\"innerOptional\": ").append("\"").append(`innerOptional`.get).append("\"").append(',') }
			sb.append(indent1).append("\"innerRepeated\": [").append(indent2).append(`innerRepeated`.map("\"" + _ + "\"").mkString(", " + indent2)).append(indent1).append(']').append(',')
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object OuterDuplicate {
	@scala.beans.BeanProperty val defaultInstance = new OuterDuplicate()

	def parseFrom(data: Array[Byte]): OuterDuplicate = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): OuterDuplicate = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf2.ByteString): OuterDuplicate = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): OuterDuplicate = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[OuterDuplicate] = defaultInstance.mergeDelimitedFromStream(stream)

	val INNER_REQUIRED_FIELD_NUMBER = 1
	val INNER_OPTIONAL_FIELD_NUMBER = 2
	val INNER_REPEATED_FIELD_NUMBER = 3

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: OuterDuplicate) = defaultInstance.mergeFrom(prototype)

	object Inner extends net.sandrogrzicic.scalabuff.Enum {
		sealed trait EnumVal extends Value
		val _UNINITIALIZED = new EnumVal { val name = "UNINITIALIZED ENUM VALUE"; val id = -1 }

		val FIRST = new EnumVal { val name = "FIRST"; val id = 1 }
		val SECOND = new EnumVal { val name = "SECOND"; val id = 2 }

		val FIRST_VALUE = 1
		val SECOND_VALUE = 2

		def valueOf(id: Int) = id match {
			case 1 => FIRST
			case 2 => SECOND
			case _default => throw new net.sandrogrzicic.scalabuff.UnknownEnumException(_default)
		}
		val internalGetValueMap = new com.google.protobuf2.Internal.EnumLiteMap[EnumVal] {
			def findValueByNumber(id: Int): EnumVal = valueOf(id)
		}
	}

}
final case class OuterEnumContainer (
	`innerMessage`: OuterEnumContainer.InnerEnumContainer = OuterEnumContainer.InnerEnumContainer.defaultInstance
) extends com.google.protobuf2.GeneratedMessageLite
	with com.google.protobuf2.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[OuterEnumContainer]
	with net.sandrogrzicic.scalabuff.Parser[OuterEnumContainer] {

	

def escape(raw: Any): String = {
  import scala.reflect.runtime.universe._
  Literal(Constant(raw)).toString
}

          

	def writeTo(output: com.google.protobuf2.CodedOutputStream) {
		output.writeMessage(1, `innerMessage`)
	}

	def getSerializedSize = {
		import com.google.protobuf2.CodedOutputStream._
		var __size = 0
		__size += computeMessageSize(1, `innerMessage`)

		__size
	}

	def mergeFrom(in: com.google.protobuf2.CodedInputStream, extensionRegistry: com.google.protobuf2.ExtensionRegistryLite): OuterEnumContainer = {
		import com.google.protobuf2.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __innerMessage: OuterEnumContainer.InnerEnumContainer = OuterEnumContainer.InnerEnumContainer.defaultInstance

		def __newMerged = OuterEnumContainer(
			__innerMessage
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 10 => __innerMessage = readMessage[OuterEnumContainer.InnerEnumContainer](in, __innerMessage, _emptyRegistry)
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: OuterEnumContainer) = {
		OuterEnumContainer(
			m.`innerMessage`
		)
	}

	def getDefaultInstanceForType = OuterEnumContainer.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf2.CodedInputStream, er: com.google.protobuf2.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"innerMessage\": ").append(`innerMessage`.toJson(indent + 1)).append(',')
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object OuterEnumContainer {
	@scala.beans.BeanProperty val defaultInstance = new OuterEnumContainer()

	def parseFrom(data: Array[Byte]): OuterEnumContainer = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): OuterEnumContainer = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf2.ByteString): OuterEnumContainer = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): OuterEnumContainer = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[OuterEnumContainer] = defaultInstance.mergeDelimitedFromStream(stream)

	val INNER_MESSAGE_FIELD_NUMBER = 1

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: OuterEnumContainer) = defaultInstance.mergeFrom(prototype)

	final case class InnerEnumContainer (
		`someEnum`: InnerEnumContainer.SomeEnum.EnumVal = InnerEnumContainer.SomeEnum._UNINITIALIZED
	) extends com.google.protobuf2.GeneratedMessageLite
		with com.google.protobuf2.MessageLite.Builder
		with net.sandrogrzicic.scalabuff.Message[InnerEnumContainer]
		with net.sandrogrzicic.scalabuff.Parser[InnerEnumContainer] {

		

def escape(raw: Any): String = {
  import scala.reflect.runtime.universe._
  Literal(Constant(raw)).toString
}

          

		def writeTo(output: com.google.protobuf2.CodedOutputStream) {
			output.writeEnum(1, `someEnum`)
		}

		def getSerializedSize = {
			import com.google.protobuf2.CodedOutputStream._
			var __size = 0
			__size += computeEnumSize(1, `someEnum`)

			__size
		}

		def mergeFrom(in: com.google.protobuf2.CodedInputStream, extensionRegistry: com.google.protobuf2.ExtensionRegistryLite): InnerEnumContainer = {
			import com.google.protobuf2.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
			var __someEnum: InnerEnumContainer.SomeEnum.EnumVal = InnerEnumContainer.SomeEnum._UNINITIALIZED

			def __newMerged = InnerEnumContainer(
				__someEnum
			)
			while (true) in.readTag match {
				case 0 => return __newMerged
				case 8 => __someEnum = InnerEnumContainer.SomeEnum.valueOf(in.readEnum())
				case default => if (!in.skipField(default)) return __newMerged
			}
			null
		}

		def mergeFrom(m: InnerEnumContainer) = {
			InnerEnumContainer(
				m.`someEnum`
			)
		}

		def getDefaultInstanceForType = InnerEnumContainer.defaultInstance
		def clear = getDefaultInstanceForType
		def isInitialized = true
		def build = this
		def buildPartial = this
		def parsePartialFrom(cis: com.google.protobuf2.CodedInputStream, er: com.google.protobuf2.ExtensionRegistryLite) = mergeFrom(cis, er)
		override def getParserForType = this
		def newBuilderForType = getDefaultInstanceForType
		def toBuilder = this
		def toJson(indent: Int = 0): String = {
			val indent0 = "\n" + ("\t" * indent)
			val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
			val sb = StringBuilder.newBuilder
			sb
				.append("{")
				sb.append(indent1).append("\"someEnum\": ").append("\"").append(`someEnum`).append("\"").append(',')
			if (sb.last.equals(',')) sb.length -= 1
			sb.append(indent0).append("}")
			sb.toString()
		}

	}

	object InnerEnumContainer {
		@scala.beans.BeanProperty val defaultInstance = new InnerEnumContainer()

		def parseFrom(data: Array[Byte]): InnerEnumContainer = defaultInstance.mergeFrom(data)
		def parseFrom(data: Array[Byte], offset: Int, length: Int): InnerEnumContainer = defaultInstance.mergeFrom(data, offset, length)
		def parseFrom(byteString: com.google.protobuf2.ByteString): InnerEnumContainer = defaultInstance.mergeFrom(byteString)
		def parseFrom(stream: java.io.InputStream): InnerEnumContainer = defaultInstance.mergeFrom(stream)
		def parseDelimitedFrom(stream: java.io.InputStream): Option[InnerEnumContainer] = defaultInstance.mergeDelimitedFromStream(stream)

		val SOME_ENUM_FIELD_NUMBER = 1

		def newBuilder = defaultInstance.newBuilderForType
		def newBuilder(prototype: InnerEnumContainer) = defaultInstance.mergeFrom(prototype)

		object SomeEnum extends net.sandrogrzicic.scalabuff.Enum {
			sealed trait EnumVal extends Value
			val _UNINITIALIZED = new EnumVal { val name = "UNINITIALIZED ENUM VALUE"; val id = -1 }

			val VALUE_1 = new EnumVal { val name = "VALUE_1"; val id = 0 }
			val VALUE_2 = new EnumVal { val name = "VALUE_2"; val id = 1 }
			val VALUE_3 = new EnumVal { val name = "VALUE_3"; val id = 2 }

			val VALUE_1_VALUE = 0
			val VALUE_2_VALUE = 1
			val VALUE_3_VALUE = 2

			def valueOf(id: Int) = id match {
				case 0 => VALUE_1
				case 1 => VALUE_2
				case 2 => VALUE_3
				case _default => throw new net.sandrogrzicic.scalabuff.UnknownEnumException(_default)
			}
			val internalGetValueMap = new com.google.protobuf2.Internal.EnumLiteMap[EnumVal] {
				def findValueByNumber(id: Int): EnumVal = valueOf(id)
			}
		}

	}
}

object EnumTest {
	def registerAllExtensions(registry: com.google.protobuf2.ExtensionRegistryLite) {
	}

	private val fromBinaryHintMap = collection.immutable.HashMap[String, Array[Byte] ⇒ com.google.protobuf2.GeneratedMessageLite](
		 "MyPeripherals" -> (bytes ⇒ MyPeripherals.parseFrom(bytes)),
		 "Outer" -> (bytes ⇒ Outer.parseFrom(bytes)),
		 "OuterDuplicate" -> (bytes ⇒ OuterDuplicate.parseFrom(bytes)),
		 "OuterEnumContainer" -> (bytes ⇒ OuterEnumContainer.parseFrom(bytes))
	)

	def deserializePayload(payload: Array[Byte], payloadType: String): com.google.protobuf2.GeneratedMessageLite = {
		fromBinaryHintMap.get(payloadType) match {
			case Some(f) ⇒ f(payload)
			case None    ⇒ throw new IllegalArgumentException(s"unimplemented deserialization of message payload of type [${payloadType}]")
		}
	}
}
