// Generated by ScalaBuff, the Scala Protocol Buffers compiler. DO NOT EDIT!
// source: complex.proto

package resources.generated

final case class ComplexMessage (
	`firstField`: com.google.protobuf2.ByteString = com.google.protobuf2.ByteString.EMPTY,
	`secondField`: Option[String] = Some("defaultValueForSecondField"),
	`nestedOuterField`: Option[ComplexMessage.Nested] = None,
	`simpleEnumField`: scala.collection.immutable.Seq[ComplexMessage.SimpleEnum.EnumVal] = Vector.empty[ComplexMessage.SimpleEnum.EnumVal],
	`repeatedStringField`: scala.collection.immutable.Seq[String] = Vector.empty[String],
	`repeatedBytesField`: scala.collection.immutable.Seq[com.google.protobuf2.ByteString] = Vector.empty[com.google.protobuf2.ByteString]
) extends com.google.protobuf2.GeneratedMessageLite
	with com.google.protobuf2.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[ComplexMessage]
	with net.sandrogrzicic.scalabuff.Parser[ComplexMessage] {

	

def escape(raw: Any): String = {
  import scala.reflect.runtime.universe._
  Literal(Constant(raw)).toString
}

          	def setSecondField(_f: String) = copy(`secondField` = Some(_f))
	def setNestedOuterField(_f: ComplexMessage.Nested) = copy(`nestedOuterField` = Some(_f))
	def setSimpleEnumField(_i: Int, _v: ComplexMessage.SimpleEnum.EnumVal) = copy(`simpleEnumField` = `simpleEnumField`.updated(_i, _v))
	def addSimpleEnumField(_f: ComplexMessage.SimpleEnum.EnumVal) = copy(`simpleEnumField` = `simpleEnumField` :+ _f)
	def addAllSimpleEnumField(_f: ComplexMessage.SimpleEnum.EnumVal*) = copy(`simpleEnumField` = `simpleEnumField` ++ _f)
	def addAllSimpleEnumField(_f: TraversableOnce[ComplexMessage.SimpleEnum.EnumVal]) = copy(`simpleEnumField` = `simpleEnumField` ++ _f)
	def setRepeatedStringField(_i: Int, _v: String) = copy(`repeatedStringField` = `repeatedStringField`.updated(_i, _v))
	def addRepeatedStringField(_f: String) = copy(`repeatedStringField` = `repeatedStringField` :+ _f)
	def addAllRepeatedStringField(_f: String*) = copy(`repeatedStringField` = `repeatedStringField` ++ _f)
	def addAllRepeatedStringField(_f: TraversableOnce[String]) = copy(`repeatedStringField` = `repeatedStringField` ++ _f)
	def setRepeatedBytesField(_i: Int, _v: com.google.protobuf2.ByteString) = copy(`repeatedBytesField` = `repeatedBytesField`.updated(_i, _v))
	def addRepeatedBytesField(_f: com.google.protobuf2.ByteString) = copy(`repeatedBytesField` = `repeatedBytesField` :+ _f)
	def addAllRepeatedBytesField(_f: com.google.protobuf2.ByteString*) = copy(`repeatedBytesField` = `repeatedBytesField` ++ _f)
	def addAllRepeatedBytesField(_f: TraversableOnce[com.google.protobuf2.ByteString]) = copy(`repeatedBytesField` = `repeatedBytesField` ++ _f)

	def clearSecondField = copy(`secondField` = None)
	def clearNestedOuterField = copy(`nestedOuterField` = None)
	def clearSimpleEnumField = copy(`simpleEnumField` = Vector.empty[ComplexMessage.SimpleEnum.EnumVal])
	def clearRepeatedStringField = copy(`repeatedStringField` = Vector.empty[String])
	def clearRepeatedBytesField = copy(`repeatedBytesField` = Vector.empty[com.google.protobuf2.ByteString])

	def writeTo(output: com.google.protobuf2.CodedOutputStream) {
		output.writeBytes(1, `firstField`)
		if (`secondField`.isDefined) output.writeString(2, `secondField`.get)
		if (`nestedOuterField`.isDefined) output.writeMessage(3, `nestedOuterField`.get)
		for (_v <- `simpleEnumField`) output.writeEnum(4, _v)
		for (_v <- `repeatedStringField`) output.writeString(5, _v)
		for (_v <- `repeatedBytesField`) output.writeBytes(6, _v)
	}

	def getSerializedSize = {
		import com.google.protobuf2.CodedOutputStream._
		var __size = 0
		__size += computeBytesSize(1, `firstField`)
		if (`secondField`.isDefined) __size += computeStringSize(2, `secondField`.get)
		if (`nestedOuterField`.isDefined) __size += computeMessageSize(3, `nestedOuterField`.get)
		for (_v <- `simpleEnumField`) __size += computeEnumSize(4, _v)
		for (_v <- `repeatedStringField`) __size += computeStringSize(5, _v)
		for (_v <- `repeatedBytesField`) __size += computeBytesSize(6, _v)

		__size
	}

	def mergeFrom(in: com.google.protobuf2.CodedInputStream, extensionRegistry: com.google.protobuf2.ExtensionRegistryLite): ComplexMessage = {
		import com.google.protobuf2.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __firstField: com.google.protobuf2.ByteString = com.google.protobuf2.ByteString.EMPTY
		var __secondField: Option[String] = `secondField`
		var __nestedOuterField: Option[ComplexMessage.Nested] = `nestedOuterField`
		val __simpleEnumField: scala.collection.mutable.Buffer[ComplexMessage.SimpleEnum.EnumVal] = `simpleEnumField`.toBuffer
		val __repeatedStringField: scala.collection.mutable.Buffer[String] = `repeatedStringField`.toBuffer
		val __repeatedBytesField: scala.collection.mutable.Buffer[com.google.protobuf2.ByteString] = `repeatedBytesField`.toBuffer

		def __newMerged = ComplexMessage(
			__firstField,
			__secondField,
			__nestedOuterField,
			Vector(__simpleEnumField: _*),
			Vector(__repeatedStringField: _*),
			Vector(__repeatedBytesField: _*)
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 10 => __firstField = in.readBytes()
			case 18 => __secondField = Some(in.readString())
			case 26 => __nestedOuterField = Some(readMessage[ComplexMessage.Nested](in, __nestedOuterField.orElse({
				__nestedOuterField = ComplexMessage.Nested.defaultInstance
				__nestedOuterField
			}).get, _emptyRegistry))
			case 32 => __simpleEnumField += ComplexMessage.SimpleEnum.valueOf(in.readEnum())
			case 34 => 
				val length = in.readRawVarint32()
				val limit = in.pushLimit(length)
				while (in.getBytesUntilLimit() > 0) {
					__simpleEnumField += ComplexMessage.SimpleEnum.valueOf(in.readEnum())
				}
				in.popLimit(limit)
			case 42 => __repeatedStringField += in.readString()
			case 50 => __repeatedBytesField += in.readBytes()
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: ComplexMessage) = {
		ComplexMessage(
			m.`firstField`,
			m.`secondField`.orElse(`secondField`),
			m.`nestedOuterField`.orElse(`nestedOuterField`),
			`simpleEnumField` ++ m.`simpleEnumField`,
			`repeatedStringField` ++ m.`repeatedStringField`,
			`repeatedBytesField` ++ m.`repeatedBytesField`
		)
	}

	def getDefaultInstanceForType = ComplexMessage.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf2.CodedInputStream, er: com.google.protobuf2.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"firstField\": ").append("\"").append(`firstField`).append("\"").append(',')
			if (`secondField`.isDefined) { sb.append(indent1).append("\"secondField\": ").append(escape(`secondField`.get)).append(',') }
			if (`nestedOuterField`.isDefined) { sb.append(indent1).append("\"nestedOuterField\": ").append(`nestedOuterField`.get.toJson(indent + 1)).append(',') }
			sb.append(indent1).append("\"simpleEnumField\": [").append(indent2).append(`simpleEnumField`.map("\"" + _ + "\"").mkString(", " + indent2)).append(indent1).append(']').append(',')
			sb.append(indent1).append("\"repeatedStringField\": [").append(indent2).append(`repeatedStringField`.map("\"" + _ + "\"").mkString(", " + indent2)).append(indent1).append(']').append(',')
			sb.append(indent1).append("\"repeatedBytesField\": [").append(indent2).append(`repeatedBytesField`.map("\"" + _ + "\"").mkString(", " + indent2)).append(indent1).append(']').append(',')
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object ComplexMessage {
	@scala.beans.BeanProperty val defaultInstance = new ComplexMessage()

	def parseFrom(data: Array[Byte]): ComplexMessage = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): ComplexMessage = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf2.ByteString): ComplexMessage = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): ComplexMessage = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[ComplexMessage] = defaultInstance.mergeDelimitedFromStream(stream)

	val FIRST_FIELD_FIELD_NUMBER = 1
	val SECOND_FIELD_FIELD_NUMBER = 2
	val NESTED_OUTER_FIELD_FIELD_NUMBER = 3
	val SIMPLE_ENUM_FIELD_FIELD_NUMBER = 4
	val REPEATED_STRING_FIELD_FIELD_NUMBER = 5
	val REPEATED_BYTES_FIELD_FIELD_NUMBER = 6

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: ComplexMessage) = defaultInstance.mergeFrom(prototype)

	object SimpleEnum extends net.sandrogrzicic.scalabuff.Enum {
		sealed trait EnumVal extends Value
		val _UNINITIALIZED = new EnumVal { val name = "UNINITIALIZED ENUM VALUE"; val id = -1 }

		val KEY_NAME = new EnumVal { val name = "KEY_NAME"; val id = 1 }

		val KEY_NAME_VALUE = 1

		def valueOf(id: Int) = id match {
			case 1 => KEY_NAME
			case _default => throw new net.sandrogrzicic.scalabuff.UnknownEnumException(_default)
		}
		val internalGetValueMap = new com.google.protobuf2.Internal.EnumLiteMap[EnumVal] {
			def findValueByNumber(id: Int): EnumVal = valueOf(id)
		}
	}

	final case class Nested (
		`nestedField`: String = "",
		`nestedEnum`: Option[SimpleEnum.EnumVal] = None
	) extends com.google.protobuf2.GeneratedMessageLite
		with com.google.protobuf2.MessageLite.Builder
		with net.sandrogrzicic.scalabuff.Message[Nested]
		with net.sandrogrzicic.scalabuff.Parser[Nested] {

		

def escape(raw: Any): String = {
  import scala.reflect.runtime.universe._
  Literal(Constant(raw)).toString
}

          		def setNestedEnum(_f: SimpleEnum.EnumVal) = copy(`nestedEnum` = Some(_f))

		def clearNestedEnum = copy(`nestedEnum` = None)

		def writeTo(output: com.google.protobuf2.CodedOutputStream) {
			output.writeString(1, `nestedField`)
			if (`nestedEnum`.isDefined) output.writeEnum(2, `nestedEnum`.get)
		}

		def getSerializedSize = {
			import com.google.protobuf2.CodedOutputStream._
			var __size = 0
			__size += computeStringSize(1, `nestedField`)
			if (`nestedEnum`.isDefined) __size += computeEnumSize(2, `nestedEnum`.get)

			__size
		}

		def mergeFrom(in: com.google.protobuf2.CodedInputStream, extensionRegistry: com.google.protobuf2.ExtensionRegistryLite): Nested = {
			import com.google.protobuf2.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
			var __nestedField: String = ""
			var __nestedEnum: Option[SimpleEnum.EnumVal] = `nestedEnum`

			def __newMerged = Nested(
				__nestedField,
				__nestedEnum
			)
			while (true) in.readTag match {
				case 0 => return __newMerged
				case 10 => __nestedField = in.readString()
				case 16 => __nestedEnum = Some(SimpleEnum.valueOf(in.readEnum()))
				case default => if (!in.skipField(default)) return __newMerged
			}
			null
		}

		def mergeFrom(m: Nested) = {
			Nested(
				m.`nestedField`,
				m.`nestedEnum`.orElse(`nestedEnum`)
			)
		}

		def getDefaultInstanceForType = Nested.defaultInstance
		def clear = getDefaultInstanceForType
		def isInitialized = true
		def build = this
		def buildPartial = this
		def parsePartialFrom(cis: com.google.protobuf2.CodedInputStream, er: com.google.protobuf2.ExtensionRegistryLite) = mergeFrom(cis, er)
		override def getParserForType = this
		def newBuilderForType = getDefaultInstanceForType
		def toBuilder = this
		def toJson(indent: Int = 0): String = {
			val indent0 = "\n" + ("\t" * indent)
			val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
			val sb = StringBuilder.newBuilder
			sb
				.append("{")
				sb.append(indent1).append("\"nestedField\": ").append("\"").append(`nestedField`).append("\"").append(',')
				if (`nestedEnum`.isDefined) { sb.append(indent1).append("\"nestedEnum\": ").append("\"").append(`nestedEnum`.get).append("\"").append(',') }
			if (sb.last.equals(',')) sb.length -= 1
			sb.append(indent0).append("}")
			sb.toString()
		}

	}

	object Nested {
		@scala.beans.BeanProperty val defaultInstance = new Nested()

		def parseFrom(data: Array[Byte]): Nested = defaultInstance.mergeFrom(data)
		def parseFrom(data: Array[Byte], offset: Int, length: Int): Nested = defaultInstance.mergeFrom(data, offset, length)
		def parseFrom(byteString: com.google.protobuf2.ByteString): Nested = defaultInstance.mergeFrom(byteString)
		def parseFrom(stream: java.io.InputStream): Nested = defaultInstance.mergeFrom(stream)
		def parseDelimitedFrom(stream: java.io.InputStream): Option[Nested] = defaultInstance.mergeDelimitedFromStream(stream)

		val NESTED_FIELD_FIELD_NUMBER = 1
		val NESTED_ENUM_FIELD_NUMBER = 2

		def newBuilder = defaultInstance.newBuilderForType
		def newBuilder(prototype: Nested) = defaultInstance.mergeFrom(prototype)

	}
}
final case class AnotherMessage (
	`fieldNested`: ComplexMessage.Nested = ComplexMessage.Nested.defaultInstance,
	`fieldEnum`: ComplexMessage.SimpleEnum.EnumVal = ComplexMessage.SimpleEnum._UNINITIALIZED
) extends com.google.protobuf2.GeneratedMessageLite
	with com.google.protobuf2.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[AnotherMessage]
	with net.sandrogrzicic.scalabuff.Parser[AnotherMessage] {

	

def escape(raw: Any): String = {
  import scala.reflect.runtime.universe._
  Literal(Constant(raw)).toString
}

          

	def writeTo(output: com.google.protobuf2.CodedOutputStream) {
		output.writeMessage(1, `fieldNested`)
		output.writeEnum(2, `fieldEnum`)
	}

	def getSerializedSize = {
		import com.google.protobuf2.CodedOutputStream._
		var __size = 0
		__size += computeMessageSize(1, `fieldNested`)
		__size += computeEnumSize(2, `fieldEnum`)

		__size
	}

	def mergeFrom(in: com.google.protobuf2.CodedInputStream, extensionRegistry: com.google.protobuf2.ExtensionRegistryLite): AnotherMessage = {
		import com.google.protobuf2.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __fieldNested: ComplexMessage.Nested = ComplexMessage.Nested.defaultInstance
		var __fieldEnum: ComplexMessage.SimpleEnum.EnumVal = ComplexMessage.SimpleEnum._UNINITIALIZED

		def __newMerged = AnotherMessage(
			__fieldNested,
			__fieldEnum
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 10 => __fieldNested = readMessage[ComplexMessage.Nested](in, __fieldNested, _emptyRegistry)
			case 16 => __fieldEnum = ComplexMessage.SimpleEnum.valueOf(in.readEnum())
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: AnotherMessage) = {
		AnotherMessage(
			m.`fieldNested`,
			m.`fieldEnum`
		)
	}

	def getDefaultInstanceForType = AnotherMessage.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf2.CodedInputStream, er: com.google.protobuf2.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"fieldNested\": ").append(`fieldNested`.toJson(indent + 1)).append(',')
			sb.append(indent1).append("\"fieldEnum\": ").append("\"").append(`fieldEnum`).append("\"").append(',')
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object AnotherMessage {
	@scala.beans.BeanProperty val defaultInstance = new AnotherMessage()

	def parseFrom(data: Array[Byte]): AnotherMessage = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): AnotherMessage = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf2.ByteString): AnotherMessage = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): AnotherMessage = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[AnotherMessage] = defaultInstance.mergeDelimitedFromStream(stream)

	val FIELD_NESTED_FIELD_NUMBER = 1
	val FIELD_ENUM_FIELD_NUMBER = 2

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: AnotherMessage) = defaultInstance.mergeFrom(prototype)

}

object Complex {
	def registerAllExtensions(registry: com.google.protobuf2.ExtensionRegistryLite) {
	}

	private val fromBinaryHintMap = collection.immutable.HashMap[String, Array[Byte] ⇒ com.google.protobuf2.GeneratedMessageLite](
		 "ComplexMessage" -> (bytes ⇒ ComplexMessage.parseFrom(bytes)),
		 "AnotherMessage" -> (bytes ⇒ AnotherMessage.parseFrom(bytes))
	)

	def deserializePayload(payload: Array[Byte], payloadType: String): com.google.protobuf2.GeneratedMessageLite = {
		fromBinaryHintMap.get(payloadType) match {
			case Some(f) ⇒ f(payload)
			case None    ⇒ throw new IllegalArgumentException(s"unimplemented deserialization of message payload of type [${payloadType}]")
		}
	}
}
