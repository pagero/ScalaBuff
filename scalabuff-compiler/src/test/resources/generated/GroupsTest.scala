// Generated by ScalaBuff, the Scala Protocol Buffers compiler. DO NOT EDIT!
// source: groups.proto

package resources.generated

final case class Groups (

) extends com.google.protobuf2.GeneratedMessageLite
	with com.google.protobuf2.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[Groups]
	with net.sandrogrzicic.scalabuff.Parser[Groups] {

	

def escape(raw: Any): String = {
  import scala.reflect.runtime.universe._
  Literal(Constant(raw)).toString
}

          

	def writeTo(output: com.google.protobuf2.CodedOutputStream) {
	}

	def getSerializedSize = {
		import com.google.protobuf2.CodedOutputStream._
		var __size = 0

		__size
	}

	def mergeFrom(in: com.google.protobuf2.CodedInputStream, extensionRegistry: com.google.protobuf2.ExtensionRegistryLite): Groups = {
		import com.google.protobuf2.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}

		def __newMerged = Groups(

		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: Groups) = {
		Groups(

		)
	}

	def getDefaultInstanceForType = Groups.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf2.CodedInputStream, er: com.google.protobuf2.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object Groups {
	@scala.beans.BeanProperty val defaultInstance = new Groups()

	def parseFrom(data: Array[Byte]): Groups = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): Groups = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf2.ByteString): Groups = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): Groups = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[Groups] = defaultInstance.mergeDelimitedFromStream(stream)


	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: Groups) = defaultInstance.mergeFrom(prototype)

}

object GroupsTest {
	def registerAllExtensions(registry: com.google.protobuf2.ExtensionRegistryLite) {
	}

	private val fromBinaryHintMap = collection.immutable.HashMap[String, Array[Byte] ⇒ com.google.protobuf2.GeneratedMessageLite](
		 "Groups" -> (bytes ⇒ Groups.parseFrom(bytes))
	)

	def deserializePayload(payload: Array[Byte], payloadType: String): com.google.protobuf2.GeneratedMessageLite = {
		fromBinaryHintMap.get(payloadType) match {
			case Some(f) ⇒ f(payload)
			case None    ⇒ throw new IllegalArgumentException(s"unimplemented deserialization of message payload of type [${payloadType}]")
		}
	}
}
